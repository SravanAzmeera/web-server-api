const jwt = require('jsonwebtoken');
const crypto = require('crypto');

// Generate a secure JWT secret (in production, use environment variable)
const JWT_SECRET = process.env.JWT_SECRET || 'your-very-secure-static-secret';
const JWT_EXPIRES_IN = process.env.JWT_EXPIRES_IN || '24h';
const JWT_REFRESH_EXPIRES_IN = process.env.JWT_REFRESH_EXPIRES_IN || '7d';
console.log('JWT_SECRET used:', JWT_SECRET);

/**
 * Generate JWT tokens for user authentication
 * @param {Object} user - User object containing email and username
 * @returns {Object} Object containing access token and refresh token
 */
function generateTokens(user) {
  const payload = {
    email: user.email,
    username: user.username,
    type: 'access'
  };

  const refreshPayload = {
    email: user.email,
    type: 'refresh'
  };

  const accessToken = jwt.sign(payload, JWT_SECRET, {
    expiresIn: JWT_EXPIRES_IN,
    issuer: 'chat-app',
    audience: 'chat-app-users'
  });

  const refreshToken = jwt.sign(refreshPayload, JWT_SECRET, {
    expiresIn: JWT_REFRESH_EXPIRES_IN,
    issuer: 'chat-app',
    audience: 'chat-app-users'
  });

  return {
    accessToken,
    refreshToken,
    expiresIn: JWT_EXPIRES_IN
  };
}

/**
 * Verify JWT token
 * @param {string} token - JWT token to verify
 * @returns {Object} Decoded token payload
 */
function verifyToken(token) {
  try {
    return jwt.verify(token, JWT_SECRET, {
      issuer: 'chat-app',
      audience: 'chat-app-users'
    });
  } catch (error) {
    throw new Error(`Token verification failed: ${error.message}`);
  }
}

/**
 * Middleware to authenticate JWT tokens
 * @param {Object} req - Express request object
 * @param {Object} res - Express response object
 * @param {Function} next - Next middleware function
 */
function authenticateToken(req, res, next) {
  const authHeader = req.headers['authorization'];
  const token = authHeader && authHeader.split(' ')[1]; // Bearer TOKEN

  if (!token) {
    return res.status(401).json({ 
      message: 'Access token required',
      error: 'NO_TOKEN'
    });
  }

  try {
    const decoded = verifyToken(token);
    
    // Check if it's an access token
    if (decoded.type !== 'access') {
      return res.status(401).json({ 
        message: 'Invalid token type',
        error: 'INVALID_TOKEN_TYPE'
      });
    }

    req.user = {
      email: decoded.email,
      username: decoded.username
    };
    next();
  } catch (error) {
    console.error('Token authentication error:', error);
    
    // Handle specific JWT errors
    if (error.name === 'TokenExpiredError') {
      return res.status(401).json({ 
        message: 'Token expired',
        error: 'TOKEN_EXPIRED'
      });
    } else if (error.name === 'JsonWebTokenError') {
      return res.status(401).json({ 
        message: 'Invalid token',
        error: 'INVALID_TOKEN'
      });
    }
    
    return res.status(403).json({ 
      message: 'Token verification failed',
      error: 'TOKEN_VERIFICATION_FAILED'
    });
  }
}

/**
 * Refresh access token using refresh token
 * @param {string} refreshToken - Refresh token
 * @returns {Object} New access token
 */
function refreshAccessToken(refreshToken) {
  try {
    const decoded = verifyToken(refreshToken);
    
    // Check if it's a refresh token
    if (decoded.type !== 'refresh') {
      throw new Error('Invalid token type');
    }

    // Generate new access token
    const accessToken = jwt.sign(
      {
        email: decoded.email,
        type: 'access'
      },
      JWT_SECRET,
      {
        expiresIn: JWT_EXPIRES_IN,
        issuer: 'chat-app',
        audience: 'chat-app-users'
      }
    );

    return {
      accessToken,
      expiresIn: JWT_EXPIRES_IN
    };
  } catch (error) {
    throw new Error(`Token refresh failed: ${error.message}`);
  }
}

/**
 * Extract token from WebSocket connection
 * @param {Object} request - WebSocket request object
 * @returns {string|null} JWT token or null
 */
function extractTokenFromWS(request) {
  const url = require('url');
  const query = url.parse(request.url, true).query;
  
  // Check for token in query parameters
  if (query.token) {
    return query.token;
  }
  
  // Check for token in headers
  const authHeader = request.headers['authorization'];
  if (authHeader && authHeader.startsWith('Bearer ')) {
    return authHeader.substring(7);
  }
  
  return null;
}

/**
 * Verify WebSocket connection token
 * @param {Object} info - WebSocket connection info
 * @returns {Promise<Object|null>} User object or null
 */
// async function verifyWSToken(info) {
//   try {
//     const token = extractTokenFromWS(info.req);
    
//     if (!token) {
//       return null;
//     }

//     const decoded = verifyToken(token);
    
//     // Check if it's an access token
//     if (decoded.type !== 'access') {
//       return null;
//     }

//     return {
//       email: decoded.email,
//       username: decoded.username
//     };
//   } catch (error) {
//     console.error('WebSocket token verification error:', error);
//     return null;
//   }
// }
async function verifyWSToken(info) {
  try {
    const token = extractTokenFromWS(info.req);
    console.log('WebSocket token received:', token);
    if (!token) {
      console.log('No token provided in WebSocket connection');
      return null;
    }

    const decoded = verifyToken(token);
    console.log('Decoded token:', JSON.stringify(decoded, null, 2));
    console.log('Checking token type:', decoded.type, 'Expected: access');

    if (!decoded.type) {
      console.log('Token missing type field');
      return null;
    }

    if (decoded.type !== 'access') {
      console.log('Invalid token type:', decoded.type);
      return null;
    }

    if (!decoded.email || !decoded.username) {
      console.log('Token missing required fields:', { email: decoded.email, username: decoded.username });
      return null;
    }

    console.log('Token verification successful:', { email: decoded.email, username: decoded.username });
    return {
      email: decoded.email,
      username: decoded.username
    };
  } catch (error) {
    console.error('WebSocket token verification error:', error.message);
    return null;
  }
}

/**
 * Generate a secure random string for additional security
 * @param {number} length - Length of the random string
 * @returns {string} Random string
 */
function generateSecureRandom(length = 32) {
  return crypto.randomBytes(length).toString('hex');
}

module.exports = {
  generateTokens,
  verifyToken,
  authenticateToken,
  refreshAccessToken,
  verifyWSToken,
  generateSecureRandom,
  JWT_SECRET
};